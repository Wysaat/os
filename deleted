; enable_a20:
;     in     al, 0x92
;     test   al, 2
;     jnz    .done
;     or     al, 2
;     and    al, 0xfe
;     out    0x92, al
;     .done:

; read 20 sectors from (0, 0, 21) to 1mb(0x100000)
; will jump to it once having paging enabled
    mov    ch, 0     ; cylinder
    mov    cl, 3    ; sector
    mov    dh, 0     ; head
    mov    dl, 0x80  ; drive
    mov    ax, 0xf00
    mov    es, ax
    mov    bx, 0x10     ; es:bx buffer address pointer
    mov    ah, 0x1
    mov    al, 2
    int    0x13
    mov    ax, 0x7c0
    mov    es, ax

    jc     failure
    cmp    al, 1
    jnz    failure







    # ; print the value in dl
    # xor    dh, dh
    # mov    bx, dx
    # mov    si, mem_size
    # call   word_to_string
    # mov    si, mem_size
    # call   print
    # ; the number got is 0x80, seems right

isr_timer:
    cli
    mov dword eax, [tick_num]
    xor   edx, edx
    mov   ebx, 25
    div   ebx
    mov   eax, edx
    xor   ebx, ebx
    mov   esi, tick_ban
    call  print
    mov   ecx, eax
    mov dword eax, [tick_num]
    call  num_to_ascii
    mov   eax, ecx
    mov   ebx, 6
    mov   esi, tick_num_ascii
    call  print
    mov dword eax, [tick_num]
    inc   eax
    mov dword [tick_num], eax

    ; send EOI to primary PIC
    mov    al, 0x20
    out    0x20, al

    sti
    iret

; print a 32 bit word in eax
num_to_ascii:
    pusha
    xor    ecx, ecx
  .first_loop:
    xor    edx, edx
    mov    ebx, 10
    div    ebx
    add    edx, '0'
    push   edx
    inc    ecx
    test   eax, eax
    jz     .print_
    jmp    .first_loop
  .print_:
    mov    edx, tick_num_ascii
  .second_loop:
    pop    eax
    mov byte [edx], al
    inc    edx
    dec    ecx
    test   ecx, ecx
    jz     .end_
    jmp    .second_loop
  .end_:
    mov byte [edx], 0
    popa
    ret

clr_scrn:
    pusha
    mov    ecx, 2000
    mov    edi, video_mem
  .start:
    mov    al, " "
    mov    ah, 0x7
    stosw
    loop   .start

    ; move cursor to upper left
    mov    al, 14
    mov    dx, 0x3d4
    out    dx, al
    mov    al, 0
    mov    dx, 0x3d5
    out    dx, al

    mov    al, 15
    mov    dx, 0x3d4
    out    dx, al
    mov    al, 0
    mov    dx, 0x3d5
    out    dx, al

    popa
    ret

; input:  esi: address of string to print
;         eax: row number, starts from 0
;         ebx: colume number, starts from 0

; output: eax: new row number
;         ebx: new colume number
print:
    pusha
    mov    edi, video_mem
    mov    ecx, 160
    mul    ecx
    add    edi, eax
    mov    eax, ebx
    mov    ecx, 2
    mul    ecx
    add    edi, eax
  .start:
    lodsb
    test   al, al
    jz     .end
    cmp    al, 10
    jz     .newline
    mov    byte [edi], al
    inc    edi
    mov    byte [edi], 0x7
    inc    edi
    jmp    .start
  .newline:
    mov    eax, edi
    sub    eax, video_mem
    xor    edx, edx
    mov    ebx, 160
    div    ebx             ; caution: div: remainder in (E)DX, quotient in (E)AX
    sub    ebx, edx
    add    edi, ebx
    jmp    .start
  .end:
    ; mov the cursor
    mov    eax, edi
    sub    eax, video_mem
    xor    edx, edx
    mov    ebx, 2
    div    ebx
    mov    ebx, eax
    ; high byte 14, low byte 15
    mov    dx, 0x3d4
    mov    al, 14
    out    dx, al
    mov    dx, 0x3d5
    mov    al, bh
    out    dx, al

    mov    dx, 0x3d4
    mov    al, 15
    out    dx, al
    mov    dx, 0x3d5
    mov    al, bl
    out    dx, al
    popa
    ret

isr_default:
    cli
    pusha
    mov   eax, 0
    mov   ebx, 0
    mov   esi, default_han
    call  print
    ; send EOI to primary PIC
    mov    al, 0x20
    out    0x20, al
    sti
    popa
    iret

isr_keyboard:
    cli
    pusha
    xor    eax, eax
    in     al, 0x60
    call   num_to_ascii
    mov    eax, 10
    mov    ebx, 40
    call   print

    mov    al, 0x20
    out    0x20, al
    sti
    popa
    iret

stage3_start:
    cli
    lidt   [idtr]

    mov    ax, 0x10
    mov    ds, ax
    mov    ss, ax
    mov    es, ax
    mov    esp, 0x70000

    call   clr_scrn

    mov    eax, 12
    mov    ebx, 5
    mov    esi, string2
    call   write
    call   clr_scrn